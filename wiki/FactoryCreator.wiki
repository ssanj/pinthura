#summary Describes the FactoryCreatorImpl class.
#labels Phase-Implementation,FactoryCreatorImpl,StartingPoint

= Introduction =

When TDDing/BDDing, using of the keyword *new*, makes it hard to test interactions, as you have no control over, how an object is created, within another class. One way to get around this is by passing in a Factory interface to abstract all object creation behind methods of its interface. 

For example take a Factory that abstracts the creation of `UrlBoundary` objects:

{{{
package com.googlecode.pinthura.data;

public interface UrlBoundaryFactory {

    UrlBoundary createUrlBoundary(String url);
}
}}}

The `UrlBoundaryFactory` interface can be easily mocked out and creation of `UrlBoundary` instances can be controlled through mocking.[http://www.easymock.org/ 1] [http://www.jmock.org/ 2]

At some point you will need a concrete implementation of the Factory interface. The class that implements this interface may be simple but can be hard to test if it interacts directly with concrete classes. Thus in many instances these Factory implementations are not tested or have rudimentary tests that don't warrant a test at all.

= Why do I need the FactoryCreator? =

The FactoryCreator manages the link between a Factory interface and the real implementation of each of the factory methods on its interface. This means that you don't have to write a concrete implementation of the Factory interface or its test case.

= Examples =