#labels FilterChainImpl,ChainofResponsibility
Describes the {{{FilterChainImpl}}} class.

= Introduction =

The {{{FilterChainImpl}}} is an implementation of the (Gof) [http://dofactory.com/Patterns/PatternChain.aspx Chain of Responsibility] pattern. 

The basic premise is, that, one of many handlers, may handle a given input. At runtime each handler will be given a chance to handle the input. If it can't handle the input, it passes it to the next handler in the chain, until a handler is found or all handlers are exhausted.

= Why use the Chain of Responsibility? =

 # Decouples the sender of a request from the object that handles the request.
 # Dynamically updating the chain of handlers for a given request. (no if-else nastiness)


= How {{{FilterChainImpl}}} implements the Chain of Responsibility =

The {{{FilterChainImpl}}} class and the {{{FilterLink}}} interface are used to implement the COR pattern. In this setting the _Handlers_ are called {{{FilterLinks}}}. The {{{FilterChainImpl}}} is initialized through a constructor that takes in a {{{List<FilterLink>}}}. 

*Guidelines for implementing the {{{FilterLink}}} interface*:
 # Each implementation in the List of {{{FilterLink}}}s have to accept the same input and same output types.
 # If the {{{FilterLink}}} can handle the input, it must return the result. 
 # A {{{FilterLink}}} must throw a {{{MatchNotFoundException}}} to indicate it can't handle the input.
 # Each {{{FilterLink}}} will be called multiple times. The state of the {{{FilterLink}}} implementation should remain constant between calls.

*Guidelines for using the {{{FilterChainImpl}}} class*:

 # The {{{FilterChainImpl}}} class is an implementation of the {{{FilterLink}}} interface and may throw a {{{MatchNotFoundException}}} if none of the supplied {{{FilterLink}}}s can handle the input. In such a situation, catching the {{{MatchNotFoundException}}} and rethrowing a more specific exception is encouraged:

Eg.

{{{

try {
  filterChain.filter(fileName);
} catch (MatchNotFoundException e) {
   throw new ConfigFileNotFoundException(e);
}

}}}

= A Mail Example =

This example models a simple mail filtering system that filters mail based on:

 # Whether it has marketing information. (spam)
 # If it has large attachments.

 All other mail goes into the Inbox.

The {{{SpamFilter}}}:

{{{
public final class SpamFilter implements FilterLink<Mail, Boolean> {

    private final SpamDetector spamDetector;
    private final MailMan mailMan;

    public SpamFilter(final SpamDetector spamDetector, final MailMan mailMan) {
        this.spamDetector = spamDetector;
        this.mailMan = mailMan;
    }

    public Boolean filter(final Mail mail) throws MatchNotFoundException {
        if (spamDetector.isSpam(mail)) {
            mailMan.moveMail(MailLocationEnum.SPAM);
            return true;
        }

        throw new MatchNotFoundException();
    }

    public String getFilterName() {
        return "Spam Filter";
    }
}
}}}

The {{{LargeAttachmentFilter}}}:

{{{
public final class LargeAttachmentFilter implements FilterLink<Mail, Boolean> {

    private final MailMan mailMan;
    private final long attachmentLimit;

    public LargeAttachmentFilter(final long attachmentLimit, final MailMan mailMan) {
        this.mailMan = mailMan;
        this.attachmentLimit = attachmentLimit;
    }

    public Boolean filter(final Mail mail) throws MatchNotFoundException {
        if (mail.getAttachmentSize() > attachmentLimit) {
            mailMan.moveMail(MailLocationEnum.LARGE_ATTACHMENTS);
            return true;
        }

        throw new MatchNotFoundException();
    }

    public String getFilterName() {
        return "Large Attachment Filter";
    }
}
}}}

The `InboxFilter`:

{{{
public final class InboxFilter implements FilterLink<Mail, Boolean> {

    private final MailMan mailMan;

    public InboxFilter(final MailMan mailMan) {
        this.mailMan = mailMan;
    }

    public Boolean filter(final Mail mail) throws MatchNotFoundException {
        mailMan.moveMail(MailLocationEnum.INBOX);
        return true;
    }

    public String getFilterName() {
        return "Inbox Filter";
    }
}
}}}