#labels FilterChain,ChainofResponsibility
{{{Describes the FilterChain class.}}}

= Introduction =

The FilterChain is an implementation of the (Gof) [http://dofactory.com/Patterns/PatternChain.aspx Chain of Responsibility] (COR) pattern. 

The basic premise is, that one of many handlers may handle a given input. Each handler will be given a chance to handle the input. If it can't handle the input it passes it to the next handler in the chain.

The main benefits of the COR are:

 # Decouples the sender of a request from the object that handles the request.
 # Allows you to dynamically update the chain of handlers for a given request.

The {{{FilterChainImpl}}} class and the {{{FilterLink}}} interface are used to implement the COR pattern. In this setting the _Handlers_ are called {{{FilterLinks}}}. Typically a {{{FilterChainImpl}}} constructor takes in a {{{List}}} of {{{FilterLinks}}}. 

Guidelines for implementing the {{{FilterLink}}} interface:
 # Each implementation in the List of {{{FilterLink}}}s have to accept the same input and same output types.
 # If the {{{FilterLink}}} can handle the input then return the result. 
 # Throw a {{{MatchNotFoundException}}} to indicate that the {{{FilterLink}}} can't handle the request.
 # Each {{{FilterLink}}} could be called multiple times so don't change the state of the {{{FilterLink}}} between calls.

Guidelines for using the {{{FilterChainImpl}}} class:

 # The {{{FilterChainImpl}}} class is an implementation of the {{{FilterLink}}} interface and may throw a {{{MatchNotFoundException}}} if none of the supplied {{{FilterLink}}}s can handle the input. In such a situation it catch the {{{MatchNotFoundException}}} and rethrow a more specific exception.

Eg.

{{{

try {
  filterChain.filter(fileName);
} catch (MatchNotFoundException e) {
   throw new ConfigFileNotFoundException(e);
}

}}}


= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages